@page "/Posts/Create"
@inject IBlogService _blog
@using System.IO
@using Blog.Data
@using Blog.Data.Models
@using Blog.Data.Models.DTOs

<h3>Create a New Blog Post</h3>

<EditForm Model="_blogPost" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	
	<div class="mb-3">
		<label for="tbTitle" class="form-label">Title</label>
		<InputText id="tbTitle" class="form-control" @bind-Value="_blogPost.Title" />
	</div>
	<div class="mb-3">
		<label for="tbAuthor" class="form-label">Author</label>
		<InputText id="tbAuthor" class="form-control" @bind-Value="_blogPost.Author" />
	</div>
	<div class="mb-3">
		<label for="taContent" class="form-label">Content</label>
		<InputTextArea id="taContent" class="form-control" @bind-Value="_blogPost.Content" placeholder="Body of blog post" rows="4" />
	</div>
	<div class="mb-3">
		<label for="tbTags" class="form-label">Tags</label>
		<InputText id="tbTags" class="form-control" @bind-Value="_blogPost.Tags" aria-describedby="tagsHelp" />
		<div id="tagsHelp" class="form-text">Comma-separated list of words or concepts related to your post</div>
	</div>
	<div class="mb-3">
		<label for="fileImage" class="form-label">Thumbnail image</label>
		<InputFile accept="image/*" id="fileImage" class="form-control" OnChange="HandleInputFileChange" />
		<div class="form-text">
			@switch (_fileValidateStatus)
			{
				case FileValidateStatus.FileSuccess:
					<span class="text-success">File validated successfully</span>
					break;
				case FileValidateStatus.FileTooLarge:
					<span class="text-danger">File too large. Choose an image file less than 4mb in size</span>
					break;
				case FileValidateStatus.FileEmpty:
				default:
					<span></span>
					break;
			}
		</div>
	</div>
	<div class="mb-3">
		<button type="submit" class="btn btn-success">Submit</button>
	</div>
</EditForm>
<div class="container ">
	@if (_createdPost != null)
	{
		<h4>Post ID @(_createdPost.PostID) created by @(_createdPost.Author), on @(_createdPost.DateCreated.ToString("MM/dd/yyyy"))</h4>
	}
</div>

@code
{
	private enum FileValidateStatus
	{
		FileEmpty = 0, FileSuccess, FileTooLarge
	}

	private IBrowserFile? _thumbnailBrowserFile = null;
	private BlogPost _blogPost = new();
	private BlogPost? _createdPost = null;

	private FileValidateStatus _fileValidateStatus;
	private void HandleInputFileChange(InputFileChangeEventArgs e)
	{
		if (e.File.Size > 0 && e.File.Size <= Global.MAX_THUMBNAIL_FILESIZE) // If a file is uploaded and within the size constraints
		{
			_thumbnailBrowserFile = e.File;
			_fileValidateStatus = FileValidateStatus.FileSuccess;
		}
		else if (e.File.Size == 0) // If an empty file or no file is uploaded
		{
			_thumbnailBrowserFile = null;
			_fileValidateStatus = FileValidateStatus.FileEmpty;
		}
		else // If a file outside the size constraints is uploaded
			_fileValidateStatus = FileValidateStatus.FileTooLarge;
	}

	private async Task HandleValidSubmit(EditContext e)
	{
		if (_fileValidateStatus == FileValidateStatus.FileSuccess && _thumbnailBrowserFile != null)
		{
			/* Attempt to upload the image to the database and blob storage */
			string? fileName = _thumbnailBrowserFile.Name.Trim(), extension = _thumbnailBrowserFile.Name.Split('.').LastOrDefault()?.Trim();
			if (!string.IsNullOrEmpty(fileName) && !string.IsNullOrEmpty(extension))
			{
				using var stream = _thumbnailBrowserFile.OpenReadStream();
				ImageUploadDTO imageUpload = new()
					{
						FileName = fileName,
						Extension = extension 
					};
				Image? image = await _blog.UploadImage(imageUpload, stream);
				Console.WriteLine($"Successfully created image {image.ImageID}, Blob {image.BlobURI}");
				_blogPost.Thumbnail_ImageID = image.ImageID;
			}
		}
		await _blog.CreatePost(_blogPost);
	}
}