@page "/Posts/Create"
@inject IBlogService _blog
@using System.IO;
@using Blog.Data.Models

<h3>Create a New Blog Post</h3>

<EditForm Model="_blogPost" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	
	<div class="mb-3">
		<label for="tbTitle" class="form-label">Title</label>
		<InputText id="tbTitle" class="form-control" @bind-Value="_blogPost.Title" />
	</div>
	<div class="mb-3">
		<label for="tbAuthor" class="form-label">Author</label>
		<InputText id="tbAuthor" class="form-control" @bind-Value="_blogPost.Author" />
	</div>
	<div class="mb-3">
		<label for="taContent" class="form-label">Content</label>
		<InputTextArea id="taContent" class="form-control" @bind-Value="_blogPost.Content" placeholder="Body of blog post" rows="4" />
	</div>
	<div class="mb-3">
		<label for="tbTags" class="form-label">Tags</label>
		<InputText id="tbTags" class="form-control" @bind-Value="_blogPost.Tags" aria-describedby="tagsHelp" />
		<div id="tagsHelp" class="form-text">Comma-separated list of words or concepts related to your post</div>
	</div>
	<div class="mb-3">
		<label for="fileImage" class="form-label">Thumbnail image</label>
		<InputFile accept="image/*" id="fileImage" class="form-control" OnChange="HandleInputFileChange" />
		<div class="form-text">
			@switch (_fileLoadStatus)
			{
				case FileLoadStatus.FileLoading:
					<span>Loading file...</span>
					break;

				case FileLoadStatus.FileLoaded:
					<span class="text-success">File successfully loaded!</span>
					break;

				case FileLoadStatus.FileLoadError:
					<span class="text-danger">File upload failed.</span>
					break;

				case FileLoadStatus.Idle:
				default:
					break;
			}
		</div>
	</div>
	<div class="mb-3">
		<button type="submit" class="btn btn-success">Submit</button>
	</div>
</EditForm>
<div class="container ">
	@if (_createdPost != null)
	{
		<h4>Post ID @(_createdPost.PostID) created by @(_createdPost.Author), on @(_createdPost.DateCreated.ToString("MM/dd/yyyy"))</h4>
	}
</div>

@code
{
	private enum FileLoadStatus
	{
		Idle = 0, FileLoading, FileLoaded, FileLoadError
	}

	private const int MAX_FILESIZE = 1024 * 1024 * 8; // 8 MEG

	private string _tempThumbnailPath = string.Empty;
	private BlogPost _blogPost = new();
	private BlogPost? _createdPost = null;

	private FileLoadStatus _fileLoadStatus = FileLoadStatus.Idle;
	private async Task HandleInputFileChange(InputFileChangeEventArgs e)
	{
		ClearCachedThumbnailFile();

		if (e.File.Size > 0)
		{
			_fileLoadStatus = FileLoadStatus.FileLoading;
			_tempThumbnailPath = Path.GetTempFileName();
			try
			{
				await using FileStream fs = new(_tempThumbnailPath, FileMode.Create);
				await e.File.OpenReadStream(MAX_FILESIZE).CopyToAsync(fs);
				_fileLoadStatus = FileLoadStatus.FileLoaded;
				Console.WriteLine($"Created temp file at location {_tempThumbnailPath}");
			}
			catch (Exception ex)
			{
				_fileLoadStatus = FileLoadStatus.FileLoadError;
				Console.WriteLine(ex);
				throw;
			}
		}
	}

	private void ClearCachedThumbnailFile()
	{
		if (!string.IsNullOrEmpty(_tempThumbnailPath) && File.Exists(_tempThumbnailPath))
		{
			File.Delete(_tempThumbnailPath);
			Console.WriteLine($"Deleted temp file at location {_tempThumbnailPath}");
		}
	}

	private async Task HandleValidSubmit()
	{

		var createdTask = await _blog.CreatePost(_blogPost);
	}
}